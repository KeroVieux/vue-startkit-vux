//breakpoint
$screen-sm-min: rem(480);
$screen-xs-max: ($screen-sm-min - 1);
$screen-md-min: rem(768);
$screen-sm-max: ($screen-md-min - 1);
$screen-lg-min: rem(992);
$screen-md-max: ($screen-lg-min - 1);
$screen-xl-min: rem(1200);
$screen-lg-max: ($screen-xl-min - 1);

@mixin breakpoint($point) {
  @if $point == xl {
    @media (min-width: $screen-xl-min) { @content; }
  }
  @else if $point == lg {
    @media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) { @content; }
  }
  @else if $point == md {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) { @content; }
  }
  @else if $point == sm {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) { @content; }
  }
  @else if $point == xs {
    @media (max-width: $screen-xs-max) { @content; }
  }
}
///*
// * Background Repeat + Position
// */

@mixin bg-option($repeat: no-repeat, $position: center) {
  background-repeat: $repeat;
  background-position: $position;
}
///*
// * CSS Animations based on animate.css
// */

@mixin animated($name, $duration) {
  @include animation-name($name);
  @include animation-duration($duration);
  @include animation-fill-mode(both);
}
@mixin transition_link($prop:all,$time:0.7s){
  @include transition($prop $time);
}
///*
// * CSS Transform - Scale and Rotate
// */
@mixin scale-rotate($scale:2, $rotate:5deg) {
  @include transform(scale($scale) rotate($rotate));
}
///*
// * Background Image Cover
// */
@mixin bg-cover($image) {
  background-image: url($image);
  background-repeat: no-repeat;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  background-position: center;
}
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &.focus,
  &:active,
  .open > .dropdown-toggle {
    color: $color;
    background-color: $background;
    border-color: transparent;
  }
  &:active,
  &.active,
  .open > .dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active {
      background-color: $background;
      border-color: $border;
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}
@function black($opacity){
  @return rgba(0,0,0,$opacity)
}
@function white($opacity){
  @return rgba(255,255,255,$opacity)
}